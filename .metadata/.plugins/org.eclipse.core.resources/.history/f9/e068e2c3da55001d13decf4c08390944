package Actividad_2_3_SincronizarHilos;

import java.util.concurrent.ThreadLocalRandom;

public class Ejercicio2_Consumidor implements Runnable{
	private static int numHilo = 0;
	private final Ejercicio2_Colecta colecta;

	public Ejercicio2_Consumidor(Ejercicio2_Colecta c) {
		this.colecta = c;
		
		Thread hilo = new Thread(this, "Recolectores" + numHilo);
		hilo.start();
	}

	@Override
	public void run() {
		int espera_aleatoria=ThreadLocalRandom.current().nextInt(100,401);
		int dinero_aleatorio=ThreadLocalRandom.current().nextInt(20,301);
		
		try {
			Thread.sleep(espera_aleatoria);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		if (this.colecta.getColecta()>=2000) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		this.colecta.decrementar(dinero_aleatorio);
		System.out.printf("Hilo consumidor %d ha retirado: %d\n", numHilo, dinero_aleatorio);
	}
}
